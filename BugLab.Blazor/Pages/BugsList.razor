@page "/project/{projectId:int}/bugs"
@page "/my-bugs"

@attribute [Authorize]

@inject NavigationManager Nav
@inject HttpClient Client

@if (ProjectId.HasValue)
{
    <MudContainer Class="d-flex">
        <MudButton Class="mb-5" OnClick="() => _showAddBug = !_showAddBug" Color="Color.Primary">@(_showAddBug ? "Hide New Bug" : "New bug")</MudButton>
        <MudButton Class="mb-5 ml-5" OnClick="() => _showBugTypes = !_showBugTypes" Color="Color.Primary">@(_showBugTypes ? "Hide bug Types" : "Bug Types")</MudButton>
    </MudContainer>
    <MudContainer Class="mb-5 d-flex">
        @if (_showAddBug)
        {
            <AddBugComponent Sprints="_sprints" Members="_selectedBugProjectMembers" BugTypes="_bugTypes" OnAdd="OnBugAdded" ProjectId="ProjectId.Value" />
        }

        @if (_showBugTypes)
        {
            <BugTypesComponent OnUpdate="async () => await _table.ReloadServerData()" BugTypes="_bugTypes" ProjectId="ProjectId.Value" OnAdd="OnBugTypeAdded" />
        }
    </MudContainer>
}

<MudTable ServerData="@(new Func<TableState, Task<TableData<BugResponse>>>(GetBugs))"
          @ref="_table" Striped="true" Hover="true" RowsPerPage="6" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Bugs</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(async titleSearch => await OnSearch(titleSearch))"
                      Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="@nameof(BugSortBy.Title)" T="BugResponse">Title</MudTableSortLabel></MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Status</MudTh>
        <MudTh><MudTableSortLabel SortLabel="@nameof(BugSortBy.Priority)" T="BugResponse">Priority</MudTableSortLabel></MudTh>
        <MudTh>Created On</MudTh>
        <MudTh>Modified On</MudTh>
        <MudTh>Project</MudTh>
        <MudTh>Assigned dev</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title"><MudButton Color="Color.Primary" @onclick="async () => await SelectedBugChanged(context)">@context.Title</MudButton> </MudTd>
        <MudTd DataLabel="Type">
            <MudChip Style="@($"{Css.BgColor} {context.BugType.Color}; {Css.Color} #fff")">@context.BugType.Title</MudChip>
        </MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Created">@context.Created.ToLocalTime()</MudTd>
        <MudTd DataLabel="Modified">@context.Modified?.ToLocalTime()</MudTd>
        <MudTd DataLabel="Project">@context.ProjectTitle</MudTd>
        <MudTd DataLabel="Assigned Dev">@context.AssignedTo?.Email</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="Bugs per page" />
    </PagerContent>
</MudTable>

@if (ProjectId.HasValue)
{
    <MudButton OnClick="@(async () => { Nav.NavigateTo("/my-bugs"); ProjectId = null; await _table.ReloadServerData();  })">my bugs</MudButton>
    <MudButton OnClick="@(() => Nav.NavigateTo($"/project/{ProjectId}/sprints"))">project sprints</MudButton>
}

@if (_selectedBug != null)
{
    <MudContainer Class="d-flex mt-5 mb-5">
        <MudItem id="bug-card">
            <BugCardComponent Members="_selectedBugProjectMembers" Sprints="_sprints" OnDelete="OnBugDeleted" BugTypes="_bugTypes"
                              OnUpdate="OnBugUpdated" Bug="_selectedBug" />
        </MudItem>
        <CommentsComponent BugId="_selectedBug.Id" Comments="_selectedBug.Comments" />
    </MudContainer>
}

@code{
    private string _titleSearch;
    private MudTable<BugResponse> _table;
    private int[] _pageSizeOptions = { 2, 4, 6, 8, 10, 15, 20 };
    private BugResponse _selectedBug;
    private bool _showAddBug;
    private bool _showBugTypes;
    private bool _fetchingData;
    private IEnumerable<UserResponse> _selectedBugProjectMembers = new List<UserResponse>();

    [Parameter] public int? ProjectId { get; set; }
    private List<BugTypeResponse> _bugTypes;
    private IEnumerable<SprintForListResponse> _sprints;

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue)
        {
            await LoadBugTypes(ProjectId.Value);
            await LoadProjectMembers(ProjectId.Value);
            await LoadSprints(ProjectId.Value);
        }
    }

    private async Task LoadBugTypes(int projectId)
    {
        _bugTypes = (await Client.GetFromJsonAsync<IEnumerable<BugTypeResponse>>(Endpoints.BugTypes(projectId))).ToList();
    }

    private async Task LoadSprints(int projectId)
    {
        _sprints = await Client.GetFromJsonAsync<IEnumerable<SprintForListResponse>>(Endpoints.Sprints(projectId));
    }

    private async Task LoadProjectMembers(int projectId)
    {
        _selectedBugProjectMembers = await Client.GetFromJsonAsync<IEnumerable<UserResponse>>(Endpoints.ProjectUsers(projectId));
    }

    private async Task OnBugTypeAdded(int id)
    {
        var bugType = await Client.GetFromJsonAsync<BugTypeResponse>($"{Endpoints.BugTypes(ProjectId.Value)}/{id}");
        _bugTypes.Add(bugType);
        _showBugTypes = false;
    }

    public async Task OnSearch(string titleSearch)
    {
        _titleSearch = titleSearch;
        await _table.ReloadServerData();
    }

    public async Task SelectedBugChanged(BugResponse bug)
    {
        if (!ProjectId.HasValue)
        {
            await LoadBugTypes(bug.ProjectId);
            await LoadSprints(bug.ProjectId);
        }

        if (_selectedBug?.ProjectId != bug.ProjectId || _selectedBugProjectMembers?.Count() < 1) await LoadProjectMembers(bug.ProjectId);

        _selectedBug = bug;
    }

    public async Task<TableData<BugResponse>> GetBugs(TableState state)
    {
        if (_fetchingData) return new TableData<BugResponse> { Items = _table.Items, TotalItems = _table.TotalItems };
        _fetchingData = true;

        var request = QueryBuilder.Use(Endpoints.Bugs)
            .WithParam(nameof(PaginationHeader.PageNumber), state.Page + 1)
            .WithParam(nameof(state.PageSize), state.PageSize)
            .WithParam(nameof(BugParams.Title), _titleSearch)
            .WithParam(nameof(BugParams.SortBy), state.SortLabel)
            .WithParam(nameof(BugParams.SortOrder), state.SortDirection);

        if (ProjectId != default) request.WithParam(nameof(ProjectId), ProjectId);

        var response = await Client.GetAsync(request.Build());
        var jsonPaginationInfo = response.Headers.GetValues("pagination").First();
        var paginationInfo = JsonSerializer.Deserialize<PaginationHeader>(jsonPaginationInfo, new JsonSerializerOptions(JsonSerializerDefaults.Web));
        _fetchingData = false;

        return new TableData<BugResponse>
        {
            Items = await response.Content.ReadFromJsonAsync<IEnumerable<BugResponse>>(JsonOptions.Defaults()),
            TotalItems = paginationInfo.TotalItems
        };
    }

    public async Task OnBugAdded(int id)
    {
        _showAddBug = false;
        _selectedBug = await Client.GetFromJsonAsync<BugResponse>($"{Endpoints.Bugs}/{id}", JsonOptions.Defaults());

        await _table.ReloadServerData();
    }

    public async Task OnBugUpdated()
    {
        await _table.ReloadServerData();
    }

    public async Task OnBugDeleted()
    {
        _selectedBug = null;
        await _table.ReloadServerData();
    }
}

<style>
    #bug-card {
        width: 100%;
    }
</style>
