@inject HttpClient Client
@inject IDialogService Dialog

<MudCard>
    <EditForm Model="_model" OnValidSubmit="OnSubmit">
        <FluentValidationValidator />
        <MudCardHeader>
            <MudTextField AdornmentColor="@Color.Primary" AdornmentIcon="@Icons.Material.Filled.Title" Adornment="Adornment.End" Variant="Variant.Filled"
                          Label="Title" For="() => _model.Title" @bind-Value="_model.Title" />
        </MudCardHeader>
        <MudCardContent>
            <MudTextField For="() => _model.Description" AdornmentColor="@Color.Primary" AdornmentIcon="@Icons.Material.Filled.Description" Adornment="Adornment.End"
                          Lines="10" Variant="Variant.Filled" Label="Description" @bind-Value="_model.Description" />

            <MudSelect For="() => _model.Priority" AdornmentColor="@Color.Primary" Variant="Variant.Filled" Label="Priority"
                       @bind-Value="_model.Priority" OpenIcon="@Icons.Material.Filled.PriorityHigh">
                @foreach (var priority in Enum.GetValues<BugPriority>())
                {
                    <MudSelectItem Value="priority">@priority</MudSelectItem>
                }
            </MudSelect>

            <MudSelect For="() => _model.Status" AdornmentColor="@Color.Primary" OpenIcon="@Icons.Material.Filled.Pending" Variant="Variant.Filled"
                       Label="Status" @bind-Value="_model.Status">
                @foreach (var status in Enum.GetValues<BugStatus>())
                {
                    <MudSelectItem Value="status">@status</MudSelectItem>
                }
            </MudSelect>

            <MudSelect For="() => _model.AssignedToId" AdornmentColor="@Color.Primary" OpenIcon="@Icons.Material.Filled.CardMembership" Variant="Variant.Filled"
                       Label="Assigned To" @bind-Value="_model.AssignedToId">
                <MudSelectItem Value="@("")"></MudSelectItem>
                @foreach (var member in Members)
                {
                    <MudSelectItem Value="member.Id">@member.Email</MudSelectItem>
                }
            </MudSelect>

            <MudSelect For="() => _model.SprintId" T="int?" AdornmentColor="@Color.Primary" OpenIcon="@Icons.Material.Filled.RunCircle" Variant="Variant.Filled"
                       Label="Sprint" @bind-Value="_model.SprintId">
                <MudSelectItem T="int?" Value="null"></MudSelectItem>
                @foreach (var sprint in Sprints)
                {
                    <MudSelectItem T="int?" Value="sprint.Id">@sprint.Title</MudSelectItem>
                }
            </MudSelect>

            <MudSelect For="() => _model.TypeId" AdornmentColor="@Color.Primary" OpenIcon="@Icons.Material.Filled.BugReport" Variant="Variant.Filled"
                       Label="Bug Type" @bind-Value="_model.TypeId">
                @foreach (var bugType in BugTypes)
                {
                    <MudSelectItem Value="bugType.Id">@bugType.Title</MudSelectItem>
                }
            </MudSelect>

            <MudText Typo="Typo.body2">Created on @Bug.Created.ToLocalTime() by @Bug.CreatedBy.Email</MudText>
            @if (Bug.Modified.HasValue)
            {
                <MudText Typo="Typo.body2">Modified on @Bug.Modified.Value.ToLocalTime() by @Bug.ModifiedBy.Email</MudText>
            }
            <MudText Typo="Typo.body2" Color="Color.Primary">Project: @Bug.ProjectTitle</MudText>

        </MudCardContent>
        <MudCardActions>
            <MudIconButton Icon="@Icons.Filled.DeleteForever" OnClick="ConfirmDelete" Color="Color.Error" />
            @if (context.IsModified())
            {
                <MudText Class="ml-5 mr-2" Color="Color.Warning">You have unsaved changes</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Update" Variant="@Variant.Filled" Size="Size.Large" Color="Color.Primary" ButtonType="ButtonType.Submit" />
            }
        </MudCardActions>
    </EditForm>
</MudCard>

@code {
    private UpdateBugRequest _model;
    private UpdateBugValidator _validator = new();

    [Parameter] public BugResponse Bug { get; set; }
    [Parameter] public IEnumerable<BugTypeResponse> BugTypes { get; set; }
    [Parameter] public IEnumerable<UserResponse> Members { get; set; }
    [Parameter] public IEnumerable<SprintForListResponse> Sprints { get; set; }
    [Parameter] public EventCallback OnUpdate { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    protected override void OnParametersSet()
    {
        _model = Bug.Adapt<UpdateBugRequest>();
        _model.TypeId = Bug.BugType.Id == default ? 1 : Bug.BugType.Id;
        _model.AssignedToId = Bug.AssignedTo?.Id;
    }

    private async Task ConfirmDelete()
    {
        var result = await Dialog.ShowMessageBox($"Are you sure you want to delete {_model.Title}", "This cannot be undone", "OK", "Cancel");
        if (!result.HasValue || !result.Value) return;

        var response = await Client.DeleteAsync($"{Endpoints.Bugs}/{_model.Id}");
        await OnDelete.InvokeAsync();
    }

    public async Task OnSubmit()
    {
        await Client.PutAsJsonAsync<UpdateBugRequest>($"{Endpoints.Bugs}/{_model.Id}", _model);
        _model.Adapt(Bug);
        Bug.BugType.Id = _model.TypeId;
        Bug.AssignedTo = new UserResponse { Id = _model.AssignedToId };

        await OnUpdate.InvokeAsync();
    }
}

<style>
    .mud-card {
        width: 100%;
        min-width: 500px;
    }
</style>